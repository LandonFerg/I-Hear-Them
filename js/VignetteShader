THREE.VignetteShader = {
    uniforms: {
        "tDiffuse": { value: null },
        "resolution": { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
        "vignetteStrength": { value: 0 },
    },
    vertexShader: [
        "varying vec2 vUv;",
        "void main() {",
            "vUv = uv;",
            "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
        "}"
    ].join( "\n" ),
    fragmentShader: [
        "uniform sampler2D tDiffuse;",
        "uniform vec2 resolution;",
        "uniform float vignetteStrength;",
        "varying vec2 vUv;",

        "void main() {",
            "vec2 uv = vUv;",
            "vec2 correctedUV = uv * resolution.xy / max(resolution.x, resolution.y);",
            
            "correctedUV *= 1.0 - correctedUV.yx;",
            
            "float vig = correctedUV.x * correctedUV.y * 25.0;",
            "vig = pow(vig, vignetteStrength);",
            
            "vec4 texColor = texture2D(tDiffuse, uv);",
            "gl_FragColor = vec4(texColor.rgb * vig, texColor.a);",
        "}"
    ].join( "\n" )
};